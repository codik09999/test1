const http = require('http');
const fs = require('fs');
const path = require('path');
const url = require('url');

const port = 8080;

// MIME —Ç–∏–ø—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤
const mimeTypes = {
    '.html': 'text/html; charset=utf-8',
    '.css': 'text/css; charset=utf-8',
    '.js': 'text/javascript; charset=utf-8',
    '.png': 'image/png',
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.gif': 'image/gif',
    '.svg': 'image/svg+xml',
    '.ico': 'image/x-icon',
    '.json': 'application/json; charset=utf-8'
};

const server = http.createServer((req, res) => {
    let pathname = url.parse(req.url).pathname;
    
    console.log(`üì• Request: ${req.method} ${pathname}`);
    
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω –∫–æ—Ä–µ–Ω—å, –æ—Ç–¥–∞–µ–º index.html
    if (pathname === '/') {
        pathname = '/index.html';
    }
    
    const filePath = path.join(__dirname, pathname);
    const ext = path.extname(filePath);
    const contentType = mimeTypes[ext] || 'text/plain; charset=utf-8';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    fs.access(filePath, fs.constants.F_OK, (err) => {
        if (err) {
            console.log(`‚ùå File not found: ${filePath}`);
            res.writeHead(404, { 'Content-Type': 'text/html; charset=utf-8' });
            res.end(`
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="utf-8">
                    <title>404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</title>
                    <style>
                        body { 
                            font-family: Arial, sans-serif; 
                            text-align: center; 
                            padding: 50px; 
                            background: #f5f5f5; 
                        }
                        .error { 
                            background: white; 
                            padding: 30px; 
                            border-radius: 10px; 
                            display: inline-block; 
                            box-shadow: 0 4px 6px rgba(0,0,0,0.1); 
                        }
                        a { color: #007bff; }
                    </style>
                </head>
                <body>
                    <div class="error">
                        <h1>404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
                        <p>–§–∞–π–ª <code>${pathname}</code> –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</p>
                        <a href="/">üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
                    </div>
                </body>
                </html>
            `);
            return;
        }
        
        // –ß–∏—Ç–∞–µ–º –∏ –æ—Ç–¥–∞–µ–º —Ñ–∞–π–ª
        fs.readFile(filePath, (err, data) => {
            if (err) {
                console.log(`‚ùå Error reading file: ${err.message}`);
                res.writeHead(500, { 'Content-Type': 'text/html; charset=utf-8' });
                res.end(`
                    <!DOCTYPE html>
                    <html>
                    <head><meta charset="utf-8"><title>–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</title></head>
                    <body>
                        <h1>500 - –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</h1>
                        <p>–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: ${err.message}</p>
                        <a href="/">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
                    </body>
                    </html>
                `);
            } else {
                console.log(`‚úÖ Serving file: ${pathname} (${contentType})`);
                res.writeHead(200, { 
                    'Content-Type': contentType,
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': '0'
                });
                res.end(data);
            }
        });
    });
});

server.listen(port, '127.0.0.1', () => {
    console.log('');
    console.log('üöÄ ====================================');
    console.log(`üåü –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
    console.log(`üåê URL: http://localhost:${port}`);
    console.log(`üìÇ –ü–∞–ø–∫–∞: ${__dirname}`);
    console.log(`‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
    console.log('üöÄ ====================================');
    console.log('');
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:');
    console.log(`   ‚Ä¢ http://localhost:${port}/ - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞`);
    console.log(`   ‚Ä¢ http://localhost:${port}/results.html - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞`);
    console.log(`   ‚Ä¢ http://localhost:${port}/test.html - –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞`);
    console.log('');
    console.log('üîß –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
    console.log('');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
server.on('error', (err) => {
    if (err.code === 'EADDRINUSE') {
        console.log(`‚ùå –ü–æ—Ä—Ç ${port} —É–∂–µ –∑–∞–Ω—è—Ç!`);
        console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä');
    } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err.message);
    }
    process.exit(1);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', () => {
    console.log('\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (SIGTERM)');
    process.exit(0);
});